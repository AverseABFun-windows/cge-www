#!/bin/bash
set -eu

# Script run by Jenkins (Automatic Cloud Builds of Castle Game Engine projects) on
# https://michalis.ii.uni.wroc.pl/jenkins/ to update CGE snapshots
# visible on http://michalis.ii.uni.wroc.pl/castle-engine-snapshots/ .
# Parts of this script are really specific to the Jenkins
# and michalis.ii.uni.wroc.pl server configuration.
#
# Rebuild programs in "${CASTLE_ENGINE_PATH}"
# (does a full rebuild, updating from SVN and cleaning to make
# a full build with newest sources),
# then move resulting binaries to "${CASTLE_SNAPSHOTS_PATH}" subdir.

export CASTLE_SNAPSHOTS_PATH="/var/www/castle-engine-snapshots/"

# prepare output path and log file
export OUTPUT_PATH="${CASTLE_SNAPSHOTS_PATH}"`date +%F`/
mkdir -p "$OUTPUT_PATH"

# castle-engine (used to compile some stuff) uses this,
# also some "cd" commands may use it.
export CASTLE_ENGINE_PATH=`pwd`

# ----------------------------------------------------------------------------

# Jenkins does svn update now.

# do_svn_update ()
# {
#   # Do sync2git, to use freshest SVN contents.
#   # This is also useful when you manually call this refresh.
#   cd ~/sources/sync2git/
#   for PROJECT_DIR in /etc/sync2git/projects/*; do
#     PROJECT_NAME="`basename \"${PROJECT_DIR}\"`"
#     ./sync2git "${PROJECT_NAME}"
#   done

#   cd "${CASTLE_ENGINE_PATH}"
#   svn up
# }

# ----------------------------------------------------------------------------

do_compile_tool ()
{
  echo '---------------------------------------------------------------'
  echo 'Compiling castle-engine tool'

  cd "${CASTLE_ENGINE_PATH}"
  scripts/clean_everything.sh

  cd castle_game_engine/tools/build-tool/
  ./castle-engine_compile.sh
  mv -f castle-engine "${CASTLE_BINARY_PATH}"
}

# ----------------------------------------------------------------------------

move_all_programs ()
{
  EXT="$1"
  OUT_PATH="$OUTPUT_PATH""$2"

  mkdir -p "$OUT_PATH"

  mv castle/castle"$EXT" "$OUT_PATH"
  mv glinformation/glinformation"$EXT" "$OUT_PATH"
  mv glinformation/glinformation_glut"$EXT" "$OUT_PATH"
  mv glplotter/gen_function"$EXT" "$OUT_PATH"
  mv glplotter/glplotter"$EXT" "$OUT_PATH"
  mv glviewimage/glViewImage"$EXT" "$OUT_PATH"
  mv kambi_lines/kambi_lines"$EXT" "$OUT_PATH"
  mv malfunction/malfunction"$EXT" "$OUT_PATH"
  mv rayhunter/rayhunter"$EXT" "$OUT_PATH"
  mv view3dscene/view3dscene"$EXT" "$OUT_PATH"
  mv view3dscene/tovrmlx3d"$EXT" "$OUT_PATH"
}

do_compile_snapshot_programs ()
{
  echo '---------------------------------------------------------------'
  echo 'Compiling all programs'

  cd "${CASTLE_ENGINE_PATH}"
  scripts/clean_everything.sh

  scripts/compile_all_programs.sh
  move_all_programs '' linux-i386

  export CASTLE_FPC_OPTIONS=-Twin32
  export CASTLE_ENGINE_TOOL_OPTIONS=--os=win32
  scripts/compile_all_programs.sh
  move_all_programs '.exe' win-i386
  export CASTLE_FPC_OPTIONS=''
  export CASTLE_ENGINE_TOOL_OPTIONS=''

  export CASTLE_FPC_OPTIONS='-Twin64 -Px86_64'
  export CASTLE_ENGINE_TOOL_OPTIONS='--os=win64 --cpu=x86_64'
  scripts/compile_all_programs.sh
  move_all_programs '.exe' win-x86_64
  export CASTLE_FPC_OPTIONS=''
  export CASTLE_ENGINE_TOOL_OPTIONS=''

  echo '---------------------------------------------------------------'
  echo 'Compiled OK, moving to the "latest" symlink.'

  # Clean old snapshots, to conserve disk space.
  # Keep only snapshots from last couple of days.
  cd "${CASTLE_SNAPSHOTS_PATH}"
  set +e
  find . -mindepth 1 -maxdepth 1 \
    -type d -and \
    -name '????-??-??' -and \
    '(' -not -iname `date +%F` ')' -and \
    '(' -not -iname `date --date='-1 day' +%F` ')' -and \
    '(' -not -iname `date --date='-2 day' +%F` ')' -and \
    '(' -not -iname `date --date='-3 day' +%F` ')' -and \
    '(' -not -iname `date --date='-4 day' +%F` ')' -and \
    '(' -not -iname `date --date='-5 day' +%F` ')' -and \
    '(' -not -iname `date --date='-6 day' +%F` ')' -and \
    '(' -not -iname `date --date='-7 day' +%F` ')' -and \
    -exec rm -Rf '{}' ';'
  set -e

  # Create "latest" link, comfortable for users.
  rm -f "${CASTLE_SNAPSHOTS_PATH}"latest
  ln -s `date +%F` "${CASTLE_SNAPSHOTS_PATH}"latest

  # This will be redone at the end, but make sure now it's done --- in case something fails later
  public_html_setup_permissions.sh
}

# ----------------------------------------------------------------------------

# Not done anymore, compositing_shaders is finished now,
# final PDF version is in SVN.
#
# echo '---------------------------------------------------------------'
# echo 'Regenerate papers PDF:'
# cd "${CASTLE_ENGINE_PATH}"papers/compositing_shaders/
# make clean
# make
# mv -f compositing_shaders.pdf ~/public_html/

# ----------------------------------------------------------------------------

do_engine_examples ()
{
  echo '---------------------------------------------------------------'
  echo 'Runing tests (clean and compile everything with examples):'

  cd  "${CASTLE_ENGINE_PATH}"castle_game_engine/
  make clean
  # make examples-laz first, to avoid creating .ppu colliding with Lazarus.
  make examples-laz
  make
  make examples
}

# ----------------------------------------------------------------------------

do_test_castle_window ()
{
  cd  "${CASTLE_ENGINE_PATH}"castle_game_engine/
  # Clean so we can be sure
  # that new -dCASTLE_WINDOW_xxx will be taken into account.
  make clean-window
  make -C ../view3dscene/ generate-code

  # note that we compile directly, not using compile.sh, since compile.sh
  # now uses castle-engine that does not allow passing -dXXX
  fpc -dRELEASE "$@" @castle-fpc.cfg ../view3dscene/code/view3dscene.lpr
}

do_castlewindow_backends_compile ()
{
  echo '---------------------------------------------------------------'
  echo 'Check CastleWindow backends compilation:'

  cd  "${CASTLE_ENGINE_PATH}"
  scripts/clean_everything.sh

  do_test_castle_window -dCASTLE_WINDOW_GTK_2
  do_test_castle_window -dCASTLE_WINDOW_XLIB
  do_test_castle_window -dCASTLE_WINDOW_GLUT
  do_test_castle_window -dCASTLE_WINDOW_TEMPLATE

  do_test_castle_window -Twin32 -dCASTLE_WINDOW_WINAPI
  do_test_castle_window -Twin32 -dCASTLE_WINDOW_GTK_2
  do_test_castle_window -Twin32 -dCASTLE_WINDOW_GLUT
  do_test_castle_window -Twin32 -dCASTLE_WINDOW_TEMPLATE

  do_test_castle_window -Twin64 -Px86_64 -dCASTLE_WINDOW_WINAPI
  # GTK2 units not available for win64?
  # do_test_castle_window -Twin64 -Px86_64 -dCASTLE_WINDOW_GTK_2
  do_test_castle_window -Twin64 -Px86_64 -dCASTLE_WINDOW_GLUT
  do_test_castle_window -Twin64 -Px86_64 -dCASTLE_WINDOW_TEMPLATE
}

# main code ------------------------------------------------------------------

. /usr/local/fpclazarus/bin/setup.sh default
do_compile_tool
do_compile_snapshot_programs
do_engine_examples
do_castlewindow_backends_compile

echo '---------------------------------------------------------------'
echo 'Setting snapshots permissions:'

chmod a+rX "${CASTLE_SNAPSHOTS_PATH}"

echo "----------- That's all folks :)"
