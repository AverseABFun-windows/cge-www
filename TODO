- Post news with partiall update:

"Some exciting news:
- <a href="http://vrml.cip.ica.uni-stuttgart.de/dune/">White_dune</a>, VRML 97
  modeller based on NURBS surfaces, supports export of normal VRML / X3D animations
  (expressed in terms of VRML interpolators) to our <a href="">Kanim (Kambi
  animations) file format</a>.
- In another news, many new features are already implemented.

  Reading X3D, with all 40 X3D components, in both XML and classic VRML encodings,
  is implemented. With all X3D new field types (except totally
  unsused MFImage, for now).

  Many X3D-specific features nodes are already supported, like
  geometric primitives [Indexed][Triangle/Quad][Fan/Strip]Set (8 nodes total).
  Rendering internals were reorganized into much smarter hierarchy, to handle
  these new X3D nodes as well as IndexedFaceSet and other VRML 97 and 1.0
  nodes implemented since a long time.

  Extrusion node handling<!--, ElevationGrid normals handling improved.-->.

  BlendMode node extension (a subset of <a href="http://www.instantreality.org/documentation/nodetype/BlendMode/">Avalon BlendMode node</a>).

  Textures with full alpha channel are now nicely rendered with blending (and textures will simple alpha channel are still detected and rendered faster by alpha_test).
  <a href="screenshot from white dune demo">

  Our screenshot options are much extended, in particular
  - you can now easily record a simple movie file with your animation
  - the temporary window is not visible, so the screenshot option works nicely in the background.
  - GNOME integration with nautilus: view3dscene can be easily used as nautilus thumbnailer, so you can see thumbnails of your VRML / X3D and other 3D model files! While potentially this can use a lot of your CPU (loading arbitrary large 3D scene), in practice this works quite great and flawlessly :) Here's a screenshot of nautilus that automatically generated thumbnails for VRML files inside directory using registered view3dscene-thumbnailer script:

  <a href="view3dscene-thumbnailer-demo.png">

  Work on basic events and routes started. Hopefully next engine releasew will support events, with interpolators and at least most basic sensors (TimeSensor, TouchSensor, KeySensor).

- Oh, and we finally got an icon for our engine and view3dscene. Next view3dscene release will be nicely integrated with GNOME (and other desktops that support relevant freedesktop specs), registering mime types for handled types, appearing in GNOME menu etc. (although all this stuff will not work instantly after simple unpack of view3dscene.tar.gz, you'll have to do <tt>make install</tt> to copy desktop files to correct locations). Here's the icon:

(displayed here as PNG, but it's also <a href="">available (and was made) in SVG</a>).

------------------------------------------------------------------------------

- fix extensions, post to Joerg

Next WWW update:
- finish X3D:
  - test ComposedShader with X3D XML on some external example,
    to be sure I handle it right.

    test on
    /home/michalis/3dmodels/openlibraries/trunk/media/models/
    hm, require setting uniform from SFNode first...

bbox calculation can be merged into one if
TNodeX3DComposedGeometryNode has virtual
Index: method (returning nil for non-indexed).

Implement PrimitiveSets:
    [Indexed] Triangle/Quad Set/Strip/Fan for X3D.
    6 triangle, 2 quad primitives.

Some general notes (maybe copy to implementation comments):

- The value of the colorPerVertex field is ignored and always
  treated as TRUE for all 8 of these. Normals, if specified by user,
  are always per-vertex.
  So always SMOOTH shading model is safe.

  For our own generated normals, we may be forced to generate
  flat ones (for non-indexed ones, or for indexed with normalPerVertex=FALSE).
  PROBLEM when there are colors (always per vertex) and normals must be flat,
  we HAVE to decompose into triangles?

- Good implementation, and ours should be like that, should keep
  whole strip/fan as one OpenGL strip/fan. In other words, we're going
  to utilize the optimal representation of these primitives, and we'll not
  deconstruct strips/fans to simple sets of triangles.

- As for smoothing: for indexed primitives:

    * If normalPerVertex is TRUE, the normal shall be the average of all triangles sharing that vertex.
    * If normalPerVertex is FALSE, the normal shall be generated for the triangle based on the ccw field.

  For non-indexed, for some primitives normals should be generated flat,
  and for some normalPerVertex is taken into account just like above.

  Anyway, there's no creaseAngle. So some simple normals calculator
  is in order.

- Looks like generation of tex Coords is not needed: if not supplied,
  do not use texture? Let's make it possible to easily plug generation,
  like the one for IndexedFaceSet.

Also impl LineSet (non-indexed) from X3D.

    http://www.instantreality.org/tutorial/shader-programs/
    some instantreality.org example models?

  - update all WWW pages, view3dscene.php features.
    vrml_implementation_status updated.

  - vrml_engine_doc is somewhat updated, update more, and regerenate output

- how (if in any way) should I package view3dscene's desktop data?
  Also, add installing thumbnailer (maybe optional?) to such "make install".

Text for next update:

After next update:
- update view3dscene description of freshmeat, to include Collada and X3D.
- check does kambi_lines work on Windows in ii 107 now.
