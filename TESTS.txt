Automated and semi-automated tests of our engine and tools.
The following tests/tasks should be done before release,
to make sure that everything is in top-quality-shape before release:

# ----------------------------------------------------------------------------
# Cleanup repository

# Test are there no files with accidental svn:executable attrib
# (may happen if commiting from FAT filesystems on Unix):
find . -executable -type f | grep -v ".sh$" | grep -v "~$"

# Search and remove not needed empty dirs from SVN repo
# (they sometimes are left, as I use git-svn, which leaves them in repo,
# as git is unable to deal with directories):
find-empty-dirs

# ----------------------------------------------------------------------------
# Basic compilation tests

# Remember to switch to latest stable FPC version for this:

./compile_all_programs.sh
./compile_all_programs.sh lazarus
cd castle_game_engine/
make
make examples
  # Or "make examples-ignore-errors", this compiles everything,
  # instead of stopping on 1st error. Useful to see all errors
  # (instead of potentially retrying "make examples" many times),
  # but you have to watch output (exit status = 0 is meaningless for
  # "make examples-ignore-errors").
make clean # get rid of conflicting files outside Lazarus package output dir
make examples-laz

# define CASTLE_ENGINE_LGPL in ../castle_game_engine/src/base/castleconf.inc
make
# revert ../castle_game_engine/src/base/castleconf.inc

# ----------------------------------------------------------------------------
# FPCUnit tests

cd tests/
# make in tests.inc CASTLE_ENGINE_TRUNK_AVAILABLE defined
./compile_console.sh
./test_castle_game_engine -a

make clean -C ..
./compile_console.sh # recompile all in debug mode for tests
./test_castle_game_engine -a

# ----------------------------------------------------------------------------
# Test that older FPC works too. For this, switch to oldest FPC promised to work
# on http://castle-engine.sourceforge.net/engine.php#section_fpc_ver, and repeat
# at least quick non-Lazarus tests:

./compile_all_programs.sh
cd castle_game_engine/
make
make examples
make clean
cd tests/
./compile_console.sh
./test_castle_game_engine -a

# ----------------------------------------------------------------------------
# Test view3dscene VRML/X3D loading/saving/rendering

cd view3dscene/
./run_tests.sh > run_tests_valid_output.txt 2>&1
svn diff # check, fix or commit differences
# (You may also uncomment longer mk_screnshot tests in run_test_once.sh
# and rerun run_tests.sh)

# ----------------------------------------------------------------------------
# Test Lazarus compilation:
# - Recompile castle_game_engine packages
# - Compile and run from Lazarus lpi files non-LCL examples:
#     view3dscene,
#     castle,
#     examples/3d_rendering_processing/view_3d_model_advanced.lpr
# - Compile and run from Lazarus lpi files LCL examples:
#     lazarus/model_3d_viewer
#     lazarus/model_3d_with_2d_controls

# Make sure Lazarus packages have all units included.

  # This can be tested by
  cd castle_game_engine/
  make clean
  make examples # (merely "make" doesn't place unit files along sources, and for this test we actually want it)
  # Now compile our packages from Lazarus,
  # letting Lazarus remove ppu files of units that belong to package.
  # This will leave only ppu files of units that don't belong to packages,
  # but were compiled during "make", thus providing us with a simple
  # way to check what is possibly missing from package:
  find . -iname '*.ppu'

  # Should find only files
  # - inside packages/../lib/
  # - units inside examples/, tools/, tests/ dir
  # - units inside dir of other OS (for example, leftovers in unix/
  #   dir were not cleaned by windows package, that's ok)
  # - units that I deliberately do not want to put in a package for now:
  #   ./opengl/castleglut.ppu (depends on glut, none of my programs actually uses it)
  #   ./window/unix/castleglx.ppu (required only for CastleWindow Xlib backend --- hm, maybe add?)
  #   ./images/fftwutils.ppu (for now, only used by one non-Lazarus example; may be added to castle_base package later.)

# ----------------------------------------------------------------------------
# Test fpmake compilation system.
# Remember to define FPCDIR first, like export FPCDIR=/home/michalis/installed/fpc/current/lib/fpc/2.4.4/

fpc fpmake.pp
./fpmake build -v
./fpmake clean -v
./fpmake build --nofpccfg --verbose
