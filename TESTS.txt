Automated and semi-automated tests of our engine and tools.
The following tests/tasks should be done before release,
to make sure that everything is in top-quality-shape before release:

# ----------------------------------------------------------------------------
# Cleanup repository

# Test are there no files with accidental svn:executable attrib
# (may happen if commiting from FAT filesystems on Unix):
cd ../castle-engine/
find . '(' -type d -name .git -prune -false ')' -or \
       '(' -type f '(' -iname '*.sh' -or -iname '*~' -or -iname 'gradlew' ')' ')' -or \
       '(' -executable -type f -print ')'

# Search and remove not needed empty dirs.
find-empty-dirs

# ----------------------------------------------------------------------------
# Basic compilation tests

# Make sure Jenkins is clean, everything works.

Test compilation methods from "getting started"
https://castle-engine.io/documentation.php

# Check once that most important stuff works outside Jenkins too.
cd castle_game_engine/
make
make examples
  # Or "make examples-ignore-errors", this compiles everything,
  # instead of stopping on 1st error. Useful to see all errors
  # (instead of potentially retrying "make examples" many times),
  # but you have to watch output (exit status = 0 is meaningless for
  # "make examples-ignore-errors").
make clean # get rid of conflicting files outside Lazarus package output dir
make examples-laz

Test some special compilation options:
- ../castle-engine/src/base/castleconf.inc
  - define CASTLE_ENGINE_LGPL
  - define CASTLE_PNG_DYNAMIC
  - undefine CASTLE_EMBED_ALL_3D_FONT_VARIATIONS
- ../castle-engine/src/x3d/octreeconf.inc
  - define CONSERVE_TRIANGLE_MEMORY
  - define CONSERVE_TRIANGLE_MEMORY_MORE
For each:
- make clean
  make
- revert later castleconf.inc , octreeconf.inc

# ----------------------------------------------------------------------------
# FPCUnit tests
# (OPTIONAL, AS JENKINS DOES THIS NOW)

cd tests/
# make in tests.inc CASTLE_ENGINE_TRUNK_AVAILABLE defined (optional; takes a looong time)
./compile_console.sh
./test_castle_game_engine -a

make clean -C ..
./compile_console.sh # recompile all in debug mode for tests
./test_castle_game_engine -a

# ----------------------------------------------------------------------------
# Test that older FPC works too. For this, switch to oldest FPC promised to work
# on https://castle-engine.io/engine.php#section_fpc_ver, and repeat
# at least quick non-Lazarus tests:
# (OPTIONAL, AS JENKINS DOES THIS NOW)

cd castle_game_engine/
make
make examples
make clean
cd tests/
./compile_console.sh
./test_castle_game_engine -a

# ----------------------------------------------------------------------------
# Test at least compilation of all Android components:
# uncomment them in ../castle-engine/examples/2d_dragon_spine_game/
# and recompile it.
#
# It's OK to not test at this point:
# - "google_analytics" (it requires special JSON,
#   it's tested along with "Escape from the Universe" regularly anyway.)
# - "heyzap" cannot be compiled together with other ad components.

# ----------------------------------------------------------------------------
# Test view3dscene VRML/X3D loading/saving/rendering

# (OPTIONAL, AS JENKINS DOES THIS NOW)
cd view3dscene/
./run_tests.sh > run_tests_valid_output.txt 2>&1
svn diff # check, fix or commit differences
# (You may also uncomment longer mk_screnshot tests in run_test_once.sh
# and rerun run_tests.sh)

# Use $define OpenGLES in ../castle-engine/base/castleconf.inc,
# check OpenGLES desktop rendering
# works on some sample models from view3dscene.

# Fake some BuggyXxx vars to be true,
# in ../castle-engine/src/base/opengl/castleglversion.pas
# in particular BuggyVbo being true,
# and check rendering works.

# Test with EnableFixedFunction := true:
view3dscene --debug-enable-fixed-function

# check PlayAnimation in view3dscene:
# - load balls animation, check loop/non-loop works
# - check that restarting the current animations works Ok, resets time.
# TODO: this check could be automated.

# ----------------------------------------------------------------------------
# Test Lazarus compilation:
# - Recompile castle_game_engine packages
# - Compile and run from Lazarus lpi files non-LCL examples:
#     view3dscene,
#     castle,
#     examples/3d_rendering_processing/view_3d_model_advanced.lpr
# - Compile and run from Lazarus lpi files LCL examples:
#     lazarus/model_3d_viewer
#     lazarus/model_3d_with_2d_controls

# Make sure Lazarus packages have all units included.

  # This can be tested by
  cd ../castle-engine/
  make clean
  make examples # (merely "make" doesn't place unit files along sources, and for this test we actually want it)
  # Now compile our packages from Lazarus,
  # letting Lazarus remove ppu files of units that belong to package.
  # This will leave only ppu files of units that don't belong to packages,
  # but were compiled during "make", thus providing us with a simple
  # way to check what is possibly missing from package:
  find . -iname '*.ppu' | grep -v "./examples/" | grep -v "./tools/" | grep -v "./tests/" | grep -v "./packages/"

  # Should find only files
  # - inside packages/../lib/
  # - units inside examples/, tools/, tests/ dir
  # - units inside dir of other OS (for example, leftovers in unix/
  #   dir were not cleaned by windows package, that's ok)
  # - units that I deliberately do not want to put in a package for now:
  #   ./opengl/castleglut.ppu (depends on glut, none of my programs actually uses it)
  #   ./window/unix/castleglx.ppu (required only for CastleWindow Xlib backend --- hm, maybe add?)
  #   ./images/fftwutils.ppu (for now, only used by one non-Lazarus example; may be added to castle_base package later.)

# For every lpk, check "More -> Show Missing Files" in Lazarus.

# ----------------------------------------------------------------------------
# Test fpmake compilation system.
# Remember to define FPCDIR first, like export FPCDIR=/home/michalis/installed/fpc/current/lib/fpc/3.0.2/

make test-fpmake
./fpmake --globalunitdir="${FPCDIR}" install
# The CGE installed units should now be known to FPC, no need for any -Fu or @castle-fpc.cfg
fpc -Mobjfpc examples/fps_game/fps_game.lpr

# ----------------------------------------------------------------------------
# Test ../cge-scripts/check_units_dependencies

# ----------------------------------------------------------------------------
# Test compilation of known programs using my engine, as some
# compatibility check:
# (OPTIONAL, AS JENKINS DOES THIS NOW)

ra_castle (roomarranger)
rrtankticks

# ----------------------------------------------------------------------------
# Make sure released zip/tar.gz don't contain any unwanted binary files.
# Allowed binaries below:

$ make cleanmore
$ find -iname *.jar
./tools/build-tool/data/android/integrated/gradle/wrapper/gradle-wrapper.jar
./tools/build-tool/data/android/base/gradle/wrapper/gradle-wrapper.jar
$ find -iname *.so
./tools/build-tool/data/android/integrated-components/ogg_vorbis/app/src/main/jni/armeabi-v7a/libtremolo.so
./tools/build-tool/data/android/integrated-components/sound/app/src/main/jni/armeabi-v7a/libopenal.so

# Android --------------------------------------------------------------------

make strip-precompiled-libraries
cd examples/2d_dragon_spine_game/
make android

# Should use system-wide Gradle, should show a message like
#   Local Gradle wrapper ("gradlew") not found, so we will call the Gradle on $PATH.
#   Make sure you have installed Gradle (e.g. from the Debian "gradle" package), in a version compatible with the Android Gradle plugin (see https://developer.android.com/studio/releases/gradle-plugin.html#updating-gradle ).

# Test fpmake and InstantFPC

Install CGE units following
https://github.com/castle-engine/castle-engine/wiki/FpMake
Run the 2 InstantFPC examples.
