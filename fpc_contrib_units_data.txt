Name: Kambi VRML game engine
Author: Michalis Kamburelis
Version: 1.6.0
File URL: http://downloads.sf.net/vrmlengine/kambi_vrml_game_engine-1.6.0-src.tar.gz
Homepage URL: http://vrmlengine.sourceforge.net/
E-mail: michalis.kambi@gmail.com
Date: ...
Supported OSes: Linux, Mac OS X, Win, others
(I wanted to write:
Tested on Linux, FreeBSD, Mac OS X, Windows. Works probably on many other modern OSes, in particular any Unix, supported by FPC.
.. but field on form has limit on length).
description:An open-source game engine. Features include:
<ul>
  <li>Optimized OpenGL rendering of models in VRML 1.0, 2.0 (aka VRML 97) and X3D formats. Including support for advanced VRML/X3D features like prototypes and events (user can interact with the 3D world).</li>
  <li>3DS, MD3, Wavefront OBJ, Collada file formats are also supported. They can be loaded, and converted to VRML.</li>
  <li>Animations are supported, in two flavors: interactive animation interpolated at runtime, or precalculated animation for fast playback.</li>
  <li>Octrees are used for various collision detection tasks.</li>
  <li>Shadows by shadow volumes (full implementation, with z-fail / z-pass switching, silhouette detection etc.).</li>
  <li>Bump mapping (using various implementations: basic multitexturing with dot3 (normalized by cube map or not), GLSL normal, GLSL with classic parallax mapping, GLSL with steep parallax mapping and self-shadowing).</li>
  <li>Shaders. There are classes to easily use ARB fragment / vertex programs and GLSL shaders. Most important, you can add and control GLSL shaders from VRML. So GLSL shaders are fully available for model designers, programmer doesn't have to do anything.</li>
  <li>GLWindow unit is available to easily create windows with OpenGL context. The intention of this unit is to be something like glut, but magnitudes better - using clean ObjectPascal, for start. Also it allows you to easily create menu bars, open/save file and similar dialogs that are implemented using native controls (GTK (1.0 or 2.0, and yes, GTK 2.0 version is perfectly stable and adviced) or WinAPI).</li>
  <li>Reading and writing of images in various formats, processing them and using as OpenGL textures. Besides many common image formats (png, jpg, ppm, bmp, just for starters), included is also support for RGBE format (Radiance HDR format).</li>
  <li>Handling of fonts, including rendering them with OpenGL, as bitmap or outline (3D) fonts.</li>
  <li>3D sound by OpenAL helpers, including intelligent OpenAL sound manager and OggVorbis format handling.</li>
  <li>Ant-aliasing (initializing OpenGL multi-sampling) is covered.</li>
  <li>Ray-tracer based on VRML models is implemented.</li>
  <li>Playing movie files. This includes loading and saving as image sequence or "real" movie files (ffmpeg is needed to encode / decode movie files). While the implementation is limited to a small movies for now (as memory consumption is large), it's perfect for flame or smoke animation in games. We even have a simple movie editor as an example program in engine sources.</li>
  <li>The engine is portable. Currently tested and used on Linux, FreeBSD, Mac OS X and Windows (all i386), and Linux on x86_64. Porters/testers for other OS/processors are welcome, the engine should be able to run on all modern OSes supported by FPC.</li>
  <li>Engine components are independent when possible. For example, you can only take model loading and processing code, and write the rendering yourself. Or you can use our OpenGL rendering, but still initialize OpenGL context yourself (no requirement to do it by our GLWindow unit). And so on. Of course, ultimately you can just use everything from our engine, nicely integrated - but the point is that you don't have to.</li>
</ul>
Category: graphics

(user and password from fpc community, michalis.kambi@gmail.com and see revelation).
